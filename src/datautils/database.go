package datautils

//////////////////////////////////////////////////////////////////////////////////////////////////////

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
)

//////////////////////////////////////////////////////////////////////////////////////////////////////

type DataIDStorage struct {
	ID   string
	Data string
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

func DataIDStorageNewBytes(id string, data []byte) *DataIDStorage {
	d := new(DataIDStorage)

	d.ID = id
	d.Data = base64.StdEncoding.EncodeToString(data)

	return d
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

func DataIDStorageNewString(id string, data string) *DataIDStorage {
	d := new(DataIDStorage)

	d.ID = id
	d.Data = data

	return d
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

func (d *DataIDStorage) JsonDecode(buffer []byte) error {

	err := json.Unmarshal(buffer, d)
	if err != nil {
		return err
	}

	if d.Data == "" {
		return fmt.Errorf("Data cannot be empty")
	}

	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

type Contents interface {
	GetContents() []Fields
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

type Fields interface {
	GetLabel() string
	GetValue() string
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
