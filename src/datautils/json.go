package datautils

//////////////////////////////////////////////////////////////////////////////////////////////////////

import (
	"encoding/base64"
	"encoding/json"
	"io/ioutil"
	"net/http"
)

//////////////////////////////////////////////////////////////////////////////////////////////////////

type JsonResponseBody struct {
	Etags []string `json:"etags,omitempty"`

	Keys   []string    `json:"keys,omitempty"`
	Images []string    `json:"images,omitempty"`
	Items  interface{} `json:"items,omitempty"`
}

//////////////////////////////////////////////////////////////////////////////////////////////////////

type JsonBodyInterface interface {
	JsonDecode(buffer []byte) error
}

//////////////////////////////////////////////////////////////////////////////////////////////////////

func JsonRequestBodyDecode(r *http.Request, decoder JsonBodyInterface) error {
	buffer, err := ioutil.ReadAll(r.Body)
	defer r.Body.Close()
	if err != nil {
		return err
	}

	err = decoder.JsonDecode(buffer)
	if err != nil {
		return err
	}

	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////////////////

func JsonB64Encrypt(data interface{}) (string, error) {
	body, err := json.Marshal(data)
	if err != nil {
		return "", err
	}

	encrypt := base64.StdEncoding.EncodeToString(body)

	return encrypt, nil
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
