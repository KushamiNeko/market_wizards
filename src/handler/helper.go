package handler

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import (
	"bytes"
	"minify"
	"net/http"
)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//type ObjectRequestBody struct {
//Date   int
//Symbol string
////ChartType string

//Object string
//}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//func (o *ObjectRequestBody) DateSymbolChartID() string {
//return fmt.Sprintf("%d_%v_%v", o.Date, o.Symbol, o.ChartType)
//}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//func (o *ObjectRequestBody) DateSymbolID() string {
//return fmt.Sprintf("%d_%v", o.Date, o.Symbol)
//}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//func (o *ObjectRequestBody) JsonDecode(buffer []byte) error {

//err := json.Unmarshal(buffer, o)
//if err != nil {
//return err
//}

//if o.Date == 0 {
//return fmt.Errorf("Date Cannot Be Empty")
//}

//if o.Symbol == "" {
//return fmt.Errorf("Symbol Cannot Be Empty")
//}

//if o.Object == "" {
//return fmt.Errorf("Object Cannot Be Empty")
//}

//return nil
//}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

func writeTemplate(w http.ResponseWriter, template string, data interface{}, cb func()) {
	buffer := new(bytes.Buffer)

	err := templates.ExecuteTemplate(
		buffer,
		template,
		data,
	)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	if cb != nil {
		cb()
	}

	w.Write(minify.Minify(buffer.Bytes()))
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
